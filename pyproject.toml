[build-system]
requires = ["scikit-build-core", "setuptools_scm>=8"]
build-backend = "scikit_build_core.build"

[project]
name = "itk-cuberille"
description = "Cuberille implicit surface polygonization to generate meshes from images."
readme = "README.rst"
license = {file = "LICENSE"}
authors = [
    { name = "Dan Meuller" },
    { name = "Matthew M. McCormick", email = "matt@mmmccormick.com" },
]
keywords = [
    "itk",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Healthcare Industry",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: Android",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Programming Language :: C++",
    "Programming Language :: Python",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Topic :: Software Development :: Libraries",
]
requires-python = ">=3.8"
dependencies = [
    "itk-io == 5.4.*",
    "numpy",
]
dynamic = ["version"]

[project.urls]
Download = "https://github.com/InsightSoftwareConsortium/ITKCuberille"
Homepage = "https://github.com/InsightSoftwareConsortium/ITKCuberille"

[tool.setuptools_scm]
# Intentionally blank to use the default behavior without warnings.

[tool.scikit-build.metadata]
version.provider = "scikit_build_core.metadata.setuptools_scm"

[tool.scikit-build]
# The versions of CMake to allow. If CMake is not present on the system or does
# not pass this specifier, it will be downloaded via PyPI if possible. An empty
# string will disable this check.
cmake.version = ">=3.16.3"

# A list of args to pass to CMake when configuring the project. Setting this in
# config or envvar will override toml. See also ``cmake.define``.
cmake.args = []

# A table of defines to pass to CMake when configuring the project. Additive.
cmake.define = {}

# Verbose printout when building.
cmake.verbose = true

# The build type to use when building the project. Valid options are: "Debug",
# "Release", "RelWithDebInfo", "MinSizeRel", "", etc.
cmake.build-type = "Release"

# The source directory to use when building the project. Currently only affects
# the native builder (not the setuptools plugin).
cmake.source-dir = "."

# The versions of Ninja to allow. If Ninja is not present on the system or does
# not pass this specifier, it will be downloaded via PyPI if possible. An empty
# string will disable this check.
ninja.version = ">=1.11"

# The logging level to display, "DEBUG", "INFO", "WARNING", and "ERROR" are
# possible options.
logging.level = "INFO"

# Files to include in the SDist even if they are skipped by default. Supports
# gitignore syntax.
sdist.include = []

# Files to exclude from the SDist even if they are included by default. Supports
# gitignore syntax.
sdist.exclude = []

# A list of license files to include in the wheel. Supports glob patterns.
wheel.license-files = ["LICEN[CS]E*",]

# Target the platlib or the purelib. If not set, the default is to target the
# platlib if wheel.cmake is true, and the purelib otherwise.
wheel.platlib = "false"

# If CMake is less than this value, backport a copy of FindPython. Set to 0
# disable this, or the empty string.
backport.find-python = "3.26.1"

# Select the editable mode to use. Can be "redirect" (default) or "inplace".
editable.mode = "redirect"

# Rebuild the project when the package is imported. The build-directory must be
# set.
editable.rebuild = false

# If set, this will provide a method for scikit-build backward compatibility.
minimum-version = "0.8.2"

# The build directory. Defaults to a temporary directory, but can be set.
build-dir = "build/{wheel_tag}"

[tool.pixi.project]
authors = ["Matt McCormick <matt@mmmccormick.com>"]
channels = ["conda-forge"]
description = "Cuberille implicit surface polygonization to generate meshes from images."
name = "itkwasm-cuberille"
platforms = ["win-64", "linux-64", "linux-aarch64", "osx-arm64"]
version = "0.1.0"

[tool.pixi.environments]
native = ["native"]
python = ["python"]

[tool.pixi.dependencies]
python = "3.12.*"
pnpm = ">=9.12.1,<10"
hatch = ">=1.13.0,<2"
pip = ">=24.2,<25"

[tool.pixi.target.win-64.dependencies]
m2w64-jq = ">=1.6.0,<2"

[tool.pixi.target.unix.dependencies]
jq = ">=1.7.1,<2"

[tool.pixi.activation]
scripts = ["wasm/itk_wasm_env.bash"]

[tool.pixi.tasks.build]
depends-on = ["build-native", "build-typescript", "build-python"]
description = "Build the project"

[tool.pixi.tasks.test]
cmd = "pnpm run test"
depends-on = ["download-test-data", "test-native", "test-python"]
description = "Run tests"

[tool.pixi.tasks.publish]
depends-on = ["publish-typescript", "publish-python-wasi", "publish-python-emscripten", "publish-python-dispatch"]
description = "Synchronize package versions"

[tool.pixi.tasks.version-sync]
depends-on = ["version-sync-typescript", "version-sync-python-wasi", "version-sync-python-emscripten", "version-sync-python-dispatch"]
description = "Synchronize package versions"

[tool.pixi.tasks.pack-test-data]
cmd = "npx dam pack test/data test/data.tar.gz"
depends-on = ["install-typescript"]
outputs = ["test/data.tar.gz"]
description = "Pack the data into a tarball for upload and print CID for package.json"

[tool.pixi.tasks.download-test-data]
cmd = "npx dam download test/data test/data.tar.gz $ITK_WASM_TEST_DATA_HASH $ITK_WASM_TEST_DATA_URLS"
depends-on = ["install-typescript"]
outputs = ["test/data.tar.gz"]
description = "Download test data"

[tool.pixi.tasks.install-typescript]
cmd = "pnpm install"
description = "Install typescript dependencies"

[tool.pixi.tasks.build-typescript]
cmd = "pnpm run build:gen:typescript"
depends-on = ["install-typescript"]
description = "Build typescript components"

[tool.pixi.tasks.test-typescript]
cmd = "pnpm test"
depends-on = ["download-test-data"]
cwd = "typescript"
description = "Test typescript components"

[tool.pixi.tasks.version-sync-typescript]
cmd = '''version=$(cat package.json | jq .version) &&
  jq ".version = $version" typescript/package.json > typescript/package.json.tmp &&
  mv typescript/package.json.tmp typescript/package.json'''

[tool.pixi.tasks.publish-typescript]
cmd = "pnpm publish --filter \"{typescript}\""

[tool.pixi.feature.python.dependencies]
pytest = ">=8.3.3,<9"

[tool.pixi.feature.python.pypi-dependencies]
pyodide-py = ">=0.26.4, <0.27"
pytest-pyodide = ">=0.58.3, <0.59"
itkwasm = ">=1.0b180, <2"

[tool.pixi.tasks.build-python]
cmd = "pnpm run build:gen:python"
depends-on = ["install-typescript"]
description = "Build python components"

[tool.pixi.feature.python.tasks.download-pyodide]
cmd = '''curl -L https://github.com/pyodide/pyodide/releases/download/0.26.4/pyodide-0.26.4.tar.bz2 -o pyodide.tar.bz2 &&
  tar xjf pyodide.tar.bz2 &&
  rm pyodide.tar.bz2'''
outputs = ["pyodide"]
description = "Download Pyodide"

[tool.pixi.feature.python.tasks.test-wasi]
cmd = "pytest"
cwd = "python/itkwasm-cuberille-wasi"
description = "Run tests for itkwasm-cuberille-wasi"

[tool.pixi.feature.python.tasks.serve-emscripten]
cmd = '''mkdir -p dist/pyodide &&
  cp -r ../../pyodide dist/ &&
  hatch build -t wheel ./dist/pyodide/ &&
  echo \"\nVisit http://localhost:8877/console.html\n\" &&
  python -m http.server --directory=./dist/pyodide 8877'''
cwd = "python/itkwasm-cuberille-emscripten"
depends-on = ["download-pyodide"]
description = "Serve itkwasm-cuberille-emscripten for development"

[tool.pixi.feature.python.tasks.test-emscripten]
cmd = '''mkdir -p dist/pyodide &&
  cp -r ../../pyodide dist/ &&
  hatch build -t wheel ./dist/pyodide/ &&
  pytest --dist-dir=./dist/pyodide --rt=chrome'''
cwd = "python/itkwasm-cuberille-emscripten"
depends-on = ["download-pyodide"]
description = "Run tests for itkwasm-cuberille-emscripten"

[tool.pixi.feature.python.tasks.serve-dispatch]
cmd = '''mkdir -p dist/pyodide &&
  cp -r ../../pyodide dist/ &&
  hatch build -t wheel ./dist/pyodide/ &&
  echo \"\nVisit http://localhost:8877/console.html\n\" &&
  python -m http.server --directory=./dist/pyodide 8877'''
cwd = "python/itkwasm-cuberille"
depends-on = ["download-pyodide"]
description = "Serve itkwasm-cuberille for development"

[tool.pixi.feature.python.tasks.test-dispatch]
cmd = '''mkdir -p dist/pyodide &&
  cp -r ../../pyodide dist/ &&
  hatch build -t wheel ./dist/pyodide/ &&
  cd ../itkwasm-cuberille-emscripten &&
  hatch build -t wheel ./dist/pyodide/ &&
  cd ../itkwasm-cuberille &&
  cp ../itkwasm-cuberille-emscripten/dist/pyodide/*_emscripten*.whl ./dist/pyodide/ &&
  pytest --dist-dir=./dist/pyodide --rt=chrome'''
cwd = "python/itkwasm-cuberille"
depends-on = ["download-pyodide"]
description = "Run python tests for itkwasm-cuberille"

[tool.pixi.feature.python.tasks.test-python]
depends-on = ["test-wasi", "test-emscripten", "test-dispatch"]
description = "Run tests for all Python packages"

[tool.pixi.tasks.version-sync-python-wasi]
cmd = '''version=$(cat ../../package.json | jq -r .version) &&
  echo "version is $version" &&
  hatch version $version'''
cwd = "python/itkwasm-cuberille-wasi"

[tool.pixi.tasks.version-sync-python-emscripten]
cmd = '''version=$(cat ../../package.json | jq -r .version) &&
  hatch version $version'''
cwd = "python/itkwasm-cuberille-emscripten"

[tool.pixi.tasks.version-sync-python-dispatch]
cmd = '''version=$(cat ../../package.json | jq -r .version) &&
  hatch version $version'''
cwd = "python/itkwasm-cuberille"

[tool.pixi.tasks.publish-python-user-check]
cmd = "if [ -n \"$HATCH_INDEX_USER\"]; then echo \"HATCH_INDEX_USER is set\"; else echo \"HATCH_INDEX_USER is not set\"; exit 1; fi"

[tool.pixi.tasks.publish-python-wasi]
cmd = '''hatch build &&
  hatch publish'''
cwd = "python/itkwasm-cuberille-wasi"

[tool.pixi.tasks.publish-python-emscripten]
cmd = '''hatch build &&
  hatch publish'''
cwd = "python/itkwasm-cuberille-emscripten"

[tool.pixi.tasks.publish-python-dispatch]
cmd = '''hatch build &&
  hatch publish'''
cwd = "python/itkwasm-cuberille"
[tool.pixi.feature.native.tasks.clone-itk]
cmd = ["stat", "$ITK_WASM_ITK_SOURCE_DIR", ">/dev/null", "||",
  "git", "clone",
    "--depth=10",
    "--branch=$ITK_WASM_ITK_BRANCH",
    "$ITK_WASM_ITK_REPOSITORY",
    "$ITK_WASM_ITK_SOURCE_DIR"]
# Note: pixi does not seem to reliably support activation environmental variables in task inputs / outputs
outputs = ["native/ITK/LICENSE"]
description = "Fetch ITK's source code"

[tool.pixi.feature.native.tasks.configure-itk]
cmd = '''cmake -B$ITK_WASM_ITK_BUILD_DIR -S$ITK_WASM_ITK_SOURCE_DIR -GNinja
  -DCMAKE_CXX_STANDARD:STRING=20
  -DCMAKE_BUILD_TYPE:STRING=Debug
  -DBUILD_EXAMPLES:BOOL=OFF
  -DBUILD_TESTING:BOOL=OFF
  -DBUILD_SHARED_LIBS:BOOL=OFF
  -DBUILD_STATIC_LIBS:BOOL=ON
  -DITK_LEGACY_REMOVE:BOOL=ON
  -DITK_BUILD_DEFAULT_MODULES:BOOL=OFF
  -DITKGroup_Core:BOOL=OFF
  -DModule_ITKCommon:BOOL=ON
  -DModule_ITKImageFunction:BOOL=ON
  -DModule_ITKImageGradient:BOOL=ON
  -DModule_ITKMesh:BOOL=ON
  -DModule_ITKConnectedComponents:BOOL=ON
  -DModule_ITKIOImageBase:BOOL=ON
  -DModule_ITKQuadEdgeMesh:BOOL=ON
  -DModule_ITKQuadEdgeMeshFiltering:BOOL=ON
  -DModule_ITKThresholding:BOOL=ON
  -DModule_ITKTestKernel:BOOL=ON
  -DModule_ITKIOTransformBase:BOOL=ON
  -DModule_ITKIOMeshBase:BOOL=ON
  -DModule_ITKAntiAlias:BOOL=ON
  -DH5_HAVE_GETPWUID:BOOL=OFF
  -DModule_MeshToPolyData:BOOL=ON
  -DDO_NOT_BUILD_ITK_TEST_DRIVER:BOOL=ON
  -DOPJ_USE_THREAD:BOOL=OFF
  -DNO_FLOAT_EXCEPTIONS:BOOL=ON
  -DITK_MSVC_STATIC_RUNTIME_LIBRARY=ON'''
depends-on = ["clone-itk"]
# Note: pixi does not seem to reliably support activation environmental variables in task inputs / outputs
# outputs = ["$ITK_WASM_ITK_BUILD_DIR/CMakeFiles/"]
outputs = ["native/ITK-build/CMakeFiles/**"]
description = "Configure ITK"

[tool.pixi.feature.native.tasks.build-itk]
cmd = "cmake --build $ITK_WASM_ITK_BUILD_DIR"
depends-on = ["configure-itk"]
outputs = ["native/ITK-build/**"]
description = "Build ITK"

[tool.pixi.feature.native.tasks.clone-itk-wasm]
cmd = ["stat", "$ITK_WASM_WEBASSEMBLY_INTERFACE_SOURCE_DIR", ">/dev/null", "||",
  "git", "clone",
    "--depth=10",
    "--branch=$ITK_WASM_WEBASSEMBLY_INTERFACE_BRANCH",
    "$ITK_WASM_WEBASSEMBLY_INTERFACE_REPOSITORY",
    "$ITK_WASM_WEBASSEMBLY_INTERFACE_SOURCE_DIR"]
# Note: pixi does not seem to reliably support activation environmental variables in task inputs / outputs
outputs = ["native/ITK-Wasm/LICENSE"]
description = "Fetch ITK's source code"

[tool.pixi.feature.native.tasks.configure-itk-wasm]
cmd = '''cmake -B$ITK_WASM_NATIVE_WORKSPACE/ITK-Wasm-build
  -S$ITK_WASM_NATIVE_WORKSPACE/ITK-Wasm
  -GNinja
  -DITK_DIR:PATH=$ITK_WASM_ITK_BUILD_DIR
  -DBUILD_TESTING:BOOL=OFF
  -DCMAKE_CXX_STANDARD:STRING=20
  -DCMAKE_BUILD_TYPE:STRING=Debug'''
depends-on = ["build-itk", "clone-itk-wasm"]
outputs = ["native/ITK-Wasm-build/CMakeFiles/"]
description = "Configure ITK-Wasm"

[tool.pixi.feature.native.tasks.build-itk-wasm]
cmd = "cmake --build $ITK_WASM_NATIVE_WORKSPACE/ITK-Wasm-build"
depends-on = ["configure-itk-wasm"]
description = "Build ITK-Wasm"

[tool.pixi.feature.native.tasks.configure-native]
cmd = '''cmake -B$ITK_WASM_NATIVE_WORKSPACE/itkwasm-cuberille-build -S. -GNinja
  -DITK_DIR:PATH=$ITK_WASM_ITK_BUILD_DIR
  -DBUILD_TESTING:BOOL=ON
  -DBUILD_ITK_WASM_PIPELINES:BOOL=ON
  -DCMAKE_CXX_STANDARD:STRING=20
  -DCMAKE_BUILD_TYPE:STRING=Debug'''
depends-on = ["build-itk-wasm"]
description = "Configure native build"

[tool.pixi.feature.native.tasks.build-native]
cmd = "cmake --build $ITK_WASM_NATIVE_WORKSPACE/itkwasm-cuberille-build"
depends-on = ["configure-native"]
description = "Build native binaries"

[tool.pixi.feature.native.tasks.test-native]
cmd = "ctest --test-dir $ITK_WASM_NATIVE_WORKSPACE/itkwasm-cuberille-build"
depends-on = ["build-native"]
description = "Test native binaries"

